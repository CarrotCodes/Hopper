/*
 * This file is generated by jOOQ.
*/
package chat.willow.hopper.generated.tables;


import chat.willow.hopper.generated.DefaultSchema;
import chat.willow.hopper.generated.Keys;
import chat.willow.hopper.generated.tables.records.ConnectionsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Connections extends TableImpl<ConnectionsRecord> {

    private static final long serialVersionUID = -1828141104;

    /**
     * The reference instance of <code>Connections</code>
     */
    public static final Connections CONNECTIONS = new Connections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectionsRecord> getRecordType() {
        return ConnectionsRecord.class;
    }

    /**
     * The column <code>Connections.id</code>.
     */
    public final TableField<ConnectionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Connections.userid</code>.
     */
    public final TableField<ConnectionsRecord, String> USERID = createField("userid", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>Connections.connectionid</code>.
     */
    public final TableField<ConnectionsRecord, String> CONNECTIONID = createField("connectionid", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>Connections.host</code>.
     */
    public final TableField<ConnectionsRecord, String> HOST = createField("host", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>Connections.port</code>.
     */
    public final TableField<ConnectionsRecord, Integer> PORT = createField("port", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Connections.tls</code>.
     */
    public final TableField<ConnectionsRecord, Boolean> TLS = createField("tls", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>Connections.nick</code>.
     */
    public final TableField<ConnectionsRecord, String> NICK = createField("nick", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * Create a <code>Connections</code> table reference
     */
    public Connections() {
        this("Connections", null);
    }

    /**
     * Create an aliased <code>Connections</code> table reference
     */
    public Connections(String alias) {
        this(alias, CONNECTIONS);
    }

    private Connections(String alias, Table<ConnectionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Connections(String alias, Table<ConnectionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConnectionsRecord> getPrimaryKey() {
        return Keys.PK_CONNECTIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConnectionsRecord>> getKeys() {
        return Arrays.<UniqueKey<ConnectionsRecord>>asList(Keys.PK_CONNECTIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ConnectionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConnectionsRecord, ?>>asList(Keys.FK_CONNECTIONS_LOGINS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Connections as(String alias) {
        return new Connections(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Connections rename(String name) {
        return new Connections(name, null);
    }
}
